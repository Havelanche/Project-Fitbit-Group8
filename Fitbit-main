import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import statsmodels.formula.api as smf
from datetime import datetime
import sqlite3 as sql


def load_data(filename):
    df = pd.read_csv(filename)
    df['ActivityDate'] = pd.to_datetime(df['ActivityDate'])
    return df

#fourth-change: add a new parameter "str" to customize the prints data
def get_unique_users(df, str):
    unique_users = df.groupby('Id')[str].sum().reset_index()
    
    # first-change: Let the index start from 1 & change the prints (no '.head()' & name of index column)
    unique_users.insert(0, 'Index', range(1, len(unique_users) + 1))
    unique_users.columns = ['#Users', 'User ID', str]
    print(unique_users)
    #Question 1: why we print "unique_users.head()", since it's missing 30 other users
    #print(unique_users.head()) 
    return unique_users

def plot_distance_distribution(unique_users):
    plt.figure(figsize=(12, 6))

    # fifth-change: add a function call here to generate a new "unique_users", so that the get_unique_users() function can work seperately
    unique_users = get_unique_users(df, "TotalDistance")
    counts, bins, patches = plt.hist(unique_users['TotalDistance'], bins=10, color='orange', edgecolor='black')
    # plt.xticks(bins, labels=[f"{int(b)}" for b in bins])
    plt.xticks(bins.round(1))

    plt.xlabel('Total Distance')
    plt.ylabel('Number of Users')
    plt.title('Distribution of Total Distances Covered by 35 Users')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

def calories_burned_per_day(df, user_id, start_date=None, end_date=None):
    user_data = df[df['Id'] == user_id]
    if start_date and end_date:
        user_data = user_data[(user_data['ActivityDate']>=start_date) &  (user_data['ActivityDate'] <= end_date)]
    
    plt.figure(figsize=(12,6))
    plt.plot(user_data['ActivityDate'], user_data['Calories'], marker='o',linestyle='-')
    plt.xlabel('Day')
    plt.ylabel('Total calories burned')
    plt.title(f'Total calories burned by User {user_id}')
    plt.xticks(rotation=45) 
    plt.grid()
    plt.show()
    
def plot_workout(df):
    df['DayOfWeek'] = df['ActivityDate'].dt.day_name()
    plt.figure(figsize=(12, 6))
    sns.countplot(x='DayOfWeek', data=df, order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], palette='pastel', hue='DayOfWeek', legend=False)
    plt.xlabel('Day of the week')
    plt.ylabel('Workout Count by Day')
    plt.title('Weekly Workout Frequency')
    plt.xticks(rotation=45) 
    plt.show()

def plot_LRM(df, user_id):
    user = df[df['Id'] == str(user_id)]
    plt.figure(figsize=(12,6))
    sns.regplot(x='TotalSteps', y='Calories', data=user, scatter_kws={'alpha':0.5}, line_kws={'color':'red'})
    plt.xlabel('Total Steps')
    plt.ylabel('Calories Burned')
    plt.title(f'Calories vs. Steps for User {user_id}')
    plt.show()
    
def classify_user(df):
    user_counts = df.groupby('Id').size()
    categories = pd.cut(user_counts, bins=[0, 10, 15, float('inf')], labels=['Light', 'Moderate', 'Heavy'])
    # second-change: DELETE " 'Id': user_counts.index, " for cutting the redundancy
    return pd.DataFrame({'Class': categories})

    

#create a acquisition function for future use of query
def SQL_acquisition(str):
    query = str
    cursor = connection.cursor()
    cursor.execute(query)
    rows = cursor.fetchall()
    df = pd.DataFrame(rows, columns = [x[0] for x in cursor.description])
    return df

# Task1: Verify the TotalSteps as we concluded = sum of TotalStep in "hourly_steps"
def verify_total_steps(df):
    df_database = SQL_acquisition(f"SELECT Id, sum(StepTotal) AS total_steps FROM hourly_steps GROUP BY Id")
    df_csv = get_unique_users(df, str='TotalSteps')

    identical = df_database['total_steps'].equals(df_csv['TotalSteps'])
    print("If the total steps in csv file is indentical as in database?:", identical)


if __name__ == '__main__':
    df = load_data("daily_activity.csv")    
    #print(df.head())

    # fourth-change: followed up parameter insert
    unique_users = get_unique_users(df, str='TotalSteps')
    
    print(f"Number of unique users: {df['Id'].nunique()} \n")

    # thrid-change: Delete "print(unique_users.head())", since it's already printed in "get_unique_users(df)"

    
    plot_distance_distribution(unique_users)
    plot_workout(df)

    df['Id'] = df['Id'].astype(str)
    linear_regression_model = smf.ols('Calories ~ TotalSteps + C(Id)', data=df).fit()
    print(linear_regression_model.summary())

    user_id_test = df['Id'].iloc[0]  
    calories_burned_per_day(df, user_id=user_id_test, start_date="2016-03-01", end_date="2016-03-30")  

    plot_LRM(df, user_id=user_id_test)  
    
    user_classes = classify_user(df)
    # sixth-change: remove the .head()
    print(user_classes)

    # #Add the external database (in the end should be in the void main)
    connection = sql.connect("fitbit_database.db")
    verify_total_steps(df)


    
 
